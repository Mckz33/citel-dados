    public Resposta processar(List<CandidatoModel> candidatos) {
        Resposta resposta = new Resposta();

        // 1. Candidatos por estado
        Map<String, Long> candidatosPorEstado = candidatos.stream()
                .collect(Collectors.groupingBy(CandidatoModel::getEstado, Collectors.counting()));
        resposta.setCandidatosPorEstado(candidatosPorEstado);

        // 2. IMC médio por faixa etária
        Map<String, Double> imcMedioPorFaixaEtaria = candidatos.stream()
                .collect(Collectors.groupingBy(this::getFaixaEtaria,
                        Collectors.averagingDouble(c -> c.getPeso() / Math.pow(c.getAltura(), 2))));
        resposta.setImcMedioPorFaixaEtaria(imcMedioPorFaixaEtaria);

        // 3. Percentual de obesos entre homens e mulheres
        long totalHomens = candidatos.stream().filter(c -> "Masculino".equals(c.getSexo())).count();
        long homensObesos = candidatos.stream().filter(c -> "Masculino".equals(c.getSexo())
                && c.getPeso() / Math.pow(c.getAltura(), 2) > 30).count();
        resposta.setPercentualObesosHomens(100.0 * homensObesos / totalHomens);

        long totalMulheres = candidatos.stream().filter(c -> "Feminino".equals(c.getSexo())).count();
        long mulheresObesas = candidatos.stream().filter(c -> "Feminino".equals(c.getSexo())
                && c.getPeso() / Math.pow(c.getAltura(), 2) > 30).count();
        resposta.setPercentualObesosMulheres(100.0 * mulheresObesas / totalMulheres);

        // 4. Média de idade por tipo sanguíneo
        Map<String, Double> mediaIdadePorTipoSanguineo = candidatos.stream()
                .collect(Collectors.groupingBy(CandidatoModel::getTipoSanguineo,
                        Collectors.averagingInt(this::getIdade)));
        resposta.setMediaIdadePorTipoSanguineo(mediaIdadePorTipoSanguineo);

        // 5. Possíveis doadores por tipo sanguíneo
        // Esta parte é mais complexa devido às regras de compatibilidade sanguínea e
        // será simplificada aqui.
        // Você precisará implementar uma lógica mais completa para mapear os tipos
        // sanguíneos dos doadores
        // para os receptores.
        // Por simplicidade, esta implementação apenas conta candidatos elegíveis para
        // doação (idade e peso).
        Map<String, Long> possiveisDoadoresPorTipoSanguineo = candidatos.stream()
                .filter(this::isElegivelParaDoacao)
                .collect(Collectors.groupingBy(CandidatoModel::getTipoSanguineo, Collectors.counting()));
        resposta.setPossiveisDoadoresPorTipoSanguineo(possiveisDoadoresPorTipoSanguineo);

        return resposta;
    }

    private String getFaixaEtaria(CandidatoModel candidato) {
        int idade = getIdade(candidato);
        if (idade <= 10)
            return "decimo";
        if (idade <= 20)
            return "vigesimo";
        if (idade <= 30)
            return "trigesimo";
        if (idade <= 40)
            return "quadragesimo";
        if (idade <= 50)
            return "quinquagesimo";
        if (idade <= 60)
            return "sexagesimo";
        if (idade <= 70)
            return "septuagesimo";
        if (idade <= 80)
            return "octogesimo";
        if (idade <= 90)
            return "nonagesimo";
        if (idade <= 100)
            return "centesimo";
        // ... e assim por diante para outras faixas etárias
        return "infinito";
    }

    private int getIdade(CandidatoModel candidato) {

        // Data de nascimento no formato "dd/MM/yyyy"
        String dataNascimentoStr = candidato.getDataNasc();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate dataNascimento = LocalDate.parse(dataNascimentoStr, formatter);

        LocalDate dataAtual = LocalDate.now();

        Period periodo = Period.between(dataNascimento, dataAtual);
        int idade = periodo.getYears();

        if (dataAtual.getMonthValue() < dataNascimento.getMonthValue() ||
                (dataAtual.getMonthValue() == dataNascimento.getMonthValue() &&
                        dataAtual.getDayOfMonth() < dataNascimento.getDayOfMonth())) {
            idade--;
        }

        return idade;
    }

    private boolean isElegivelParaDoacao(CandidatoModel candidato) {
        return getIdade(candidato) >= 16 && getIdade(candidato) <= 69 && candidato.getPeso() > 50;
    }